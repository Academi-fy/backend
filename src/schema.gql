# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BlackboardCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  coverImage: Int!
  schoolId: Int!
  text: Int!
  title: Int!
  _all: Int!
}

type BlackboardCount {
  authors: Int!
  tags: Int!
  targets: Int!
}

type BlackboardMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  coverImage: String
  schoolId: String
  text: String
  title: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type BlackboardMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  coverImage: String
  schoolId: String
  text: String
  title: String
}

type Blackboard {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  coverImage: String
  schoolId: String!
  text: String
  title: String!
  authors: [User!]
  school: School!
  tags: [BlackboardTag!]
  targets: [User!]
  _count: BlackboardCount!
}

type BlackboardTagCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  name: Int!
  _all: Int!
}

type BlackboardTagCount {
  blackboards: Int!
}

type BlackboardTagMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type BlackboardTagMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type BlackboardTag {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  blackboards: [Blackboard!]
  _count: BlackboardTagCount!
}

type ChatCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  avatar: Int!
  name: Int!
  type: Int!
  _all: Int!
}

type ChatCount {
  activities: Int!
  clubs: Int!
  courses: Int!
  targets: Int!
}

type ChatMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  avatar: String
  name: String
  type: ChatType
}

enum ChatType {
  GROUP
  PRIVATE
  COURSE
}

type ChatMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  avatar: String
  name: String
  type: ChatType
}

type Chat {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  avatar: String
  name: String!
  type: ChatType!
  activities: [ChatActivity!]
  clubs: [Club!]
  courses: [Course!]
  targets: [UserChat!]
  _count: ChatCount!
}

type ChatActivityCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  chatId: Int!
  executorId: Int!
  answerToId: Int!
  type: Int!
  activityContent: Int!
  starred: Int!
  _all: Int!
}

type ChatActivityCount {
  readBy: Int!
  answeredBy: Int!
}

type ChatActivityMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  chatId: String
  executorId: String
  answerToId: String
  type: ChatActivityType
  starred: Boolean
}

"""Type of a chat activity"""
enum ChatActivityType {
  MESSAGE_SEND
  MESSAGE_EDIT
  MESSAGE_DELETE
  MESSAGE_ANSWER
  ACTIVITY_STAR
  ACTIVITY_UNSTAR
  POLL_SEND
  POLL_EDIT
  POLL_DELETE
  POLL_VOTE
  POLL_UNVOTE
  POLL_CLOSE
  POLL_REOPEN
  POLL_RESULT
  CHAT_TARGET_ADD
  CHAT_TARGET_REMOVE
  CHAT_COURSE_ADD
  CHAT_COURSE_REMOVE
  CHAT_CLUB_ADD
  CHAT_CLUB_REMOVE
  CHAT_NAME_CHANGE
  CHAT_AVATAR_CHANGE
}

type ChatActivityMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  chatId: String
  executorId: String
  answerToId: String
  type: ChatActivityType
  starred: Boolean
}

type ChatActivity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  chatId: String!
  executorId: String!
  answerToId: String
  type: ChatActivityType!
  activityContent: [JSON!]
  starred: Boolean!
  chat: Chat!
  executor: User!
  readBy: [User!]
  answerTo: ChatActivity
  answeredBy: [ChatActivity!]
  _count: ChatActivityCount!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type ClassCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  gradeId: Int!
  schoolId: Int!
  specifiedGrade: Int!
  _all: Int!
}

type ClassCount {
  courses: Int!
  members: Int!
}

type ClassMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  gradeId: String
  schoolId: String
  specifiedGrade: String
}

type ClassMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  gradeId: String
  schoolId: String
  specifiedGrade: String
}

type Class {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  gradeId: String!
  schoolId: String!
  specifiedGrade: String
  courses: [Course!]
  grade: Grade!
  members: [User!]
  school: School!
  _count: ClassCount!
}

type ClubCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  avatar: Int!
  chatId: Int!
  coverImage: Int!
  description: Int!
  location: Int!
  meetingDay: Int!
  meetingTime: Int!
  name: Int!
  requirements: Int!
  schoolId: Int!
  _all: Int!
}

type ClubCount {
  events: Int!
  leaders: Int!
  members: Int!
  tags: Int!
}

type ClubMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  avatar: String
  chatId: String
  coverImage: String
  description: String
  location: String
  meetingDay: Day
  meetingTime: String
  name: String
  schoolId: String
}

"""Week day"""
enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

type ClubMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  avatar: String
  chatId: String
  coverImage: String
  description: String
  location: String
  meetingDay: Day
  meetingTime: String
  name: String
  schoolId: String
}

type Club {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  avatar: String
  chatId: String
  coverImage: String
  description: String
  location: String
  meetingDay: Day
  meetingTime: String
  name: String!
  requirements: [JSON!]
  schoolId: String!
  chat: Chat
  events: [Event!]
  leaders: [User!]
  members: [User!]
  school: School!
  tags: [ClubTag!]
  _count: ClubCount!
}

type ClubTagCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  name: Int!
  _all: Int!
}

type ClubTagCount {
  clubs: Int!
}

type ClubTagMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type ClubTagMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}

type ClubTag {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  clubs: [Club!]
  _count: ClubTagCount!
}

type CourseCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  chatId: Int!
  name: Int!
  subjectId: Int!
  teacherId: Int!
  _all: Int!
}

type CourseCount {
  classes: Int!
  members: Int!
}

type CourseMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  chatId: String
  name: String
  subjectId: String
  teacherId: String
}

type CourseMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  chatId: String
  name: String
  subjectId: String
  teacherId: String
}

type Course {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  chatId: String
  name: String!
  subjectId: String!
  teacherId: String!
  chat: Chat
  classes: [Class!]
  members: [User!]
  subject: Subject!
  teacher: User!
  _count: CourseCount!
}

type EventCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  description: Int!
  endDate: Int!
  host: Int!
  information: Int!
  location: Int!
  schoolId: Int!
  startDate: Int!
  title: Int!
  _all: Int!
}

type EventCount {
  clubs: Int!
  subscribers: Int!
  tickets: Int!
}

type EventMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  description: String
  endDate: DateTime
  host: String
  location: String
  schoolId: String
  startDate: DateTime
  title: String
}

type EventMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  description: String
  endDate: DateTime
  host: String
  location: String
  schoolId: String
  startDate: DateTime
  title: String
}

type Event {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String
  endDate: DateTime!
  host: String!
  information: [JSON!]
  location: String
  schoolId: String!
  startDate: DateTime!
  title: String!
  clubs: [Club!]
  school: School!
  subscribers: [User!]
  tickets: [EventTicket!]
  _count: EventCount!
}

type EventTicketAvgAggregate {
  price: Float
}

type EventTicketCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  buyerId: Int!
  eventId: Int!
  price: Int!
  saleDate: Int!
  _all: Int!
}

type EventTicketMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  buyerId: String
  eventId: String
  price: Int
  saleDate: DateTime
}

type EventTicketMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  buyerId: String
  eventId: String
  price: Int
  saleDate: DateTime
}

type EventTicketSumAggregate {
  price: Int
}

type EventTicket {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  buyerId: String!
  eventId: String!
  price: Int!
  saleDate: DateTime!
  buyer: User!
  event: Event!
}

type GradeCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  level: Int!
  schoolId: Int!
  _all: Int!
}

type GradeCount {
  classes: Int!
}

type GradeMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  level: GradeLevel
  schoolId: String
}

"""Level of the grade"""
enum GradeLevel {
  G5
  G6
  G7
  G8
  G9
  G10
}

type GradeMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  level: GradeLevel
  schoolId: String
}

type Grade {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  level: GradeLevel!
  schoolId: String!
  classes: [Class!]
  school: School!
  _count: GradeCount!
}

type SchoolCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  name: Int!
  setupAccountId: Int!
  _all: Int!
}

type SchoolCount {
  blackboards: Int!
  classes: Int!
  clubs: Int!
  events: Int!
  grades: Int!
  members: Int!
  subjects: Int!
}

type SchoolMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  setupAccountId: String
}

type SchoolMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  setupAccountId: String
}

type School {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  setupAccountId: String!
  blackboards: [Blackboard!]
  classes: [Class!]
  clubs: [Club!]
  events: [Event!]
  grades: [Grade!]
  members: [User!]
  setupAccount: SetupAccount!
  subjects: [Subject!]
  _count: SchoolCount!
}

type SetupAccountCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  schoolId: Int!
  schoolName: Int!
  _all: Int!
}

type SetupAccountMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  schoolId: String
  schoolName: String
}

type SetupAccountMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  schoolId: String
  schoolName: String
}

type SetupAccount {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  schoolId: String
  schoolName: String!
  school: School
}

type SubjectCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  schoolId: Int!
  shortName: Int!
  type: Int!
  _all: Int!
}

type SubjectCount {
  courses: Int!
}

type SubjectMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  schoolId: String
  shortName: String
  type: SubjectType
}

"""Type of the subject"""
enum SubjectType {
  ART
  BIOLOGY
  CHEMISTRY
  COMPUTER_SCIENCE
  ECONOMICS
  ENGLISH
  ETHICS
  FRENCH
  GEOGRAPHY
  GERMAN
  HISTORY
  IMP
  ITALIAN
  MATHS
  MUSIC
  NWT
  PHYSICS
  POLITICS
  RELIGION
  SPANISH
  SPORT
}

type SubjectMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  schoolId: String
  shortName: String
  type: SubjectType
}

type Subject {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  schoolId: String!
  shortName: String!
  type: SubjectType!
  courses: [Course!]
  school: School!
  _count: SubjectCount!
}

type UserCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  avatar: Int!
  firstName: Int!
  lastName: Int!
  type: Int!
  userAccountId: Int!
  _all: Int!
}

type UserCount {
  blackboards: Int!
  blackboardsReceived: Int!
  chatActivitiesCreated: Int!
  classes: Int!
  clubs: Int!
  clubsAsLeader: Int!
  courses: Int!
  coursesAsTeacher: Int!
  events: Int!
  eventTickets: Int!
  readActivities: Int!
  schools: Int!
  userChats: Int!
}

type UserMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  avatar: String
  firstName: String
  lastName: String
  type: UserType
  userAccountId: String
}

"""Type of a user"""
enum UserType {
  ADMIN
  TEACHER
  STUDENT
}

type UserMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  avatar: String
  firstName: String
  lastName: String
  type: UserType
  userAccountId: String
}

type User {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  avatar: String
  firstName: String!
  lastName: String!
  type: UserType!
  userAccountId: String!
  blackboards: [Blackboard!]
  blackboardsReceived: [Blackboard!]
  chatActivitiesCreated: [ChatActivity!]
  classes: [Class!]
  clubs: [Club!]
  clubsAsLeader: [Club!]
  courses: [Course!]
  coursesAsTeacher: [Course!]
  events: [Event!]
  eventTickets: [EventTicket!]
  readActivities: [ChatActivity!]
  schools: [School!]
  userAccount: UserAccount!
  userChats: [UserChat!]
  _count: UserCount!
}

type UserAccountCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  password: Int!
  userId: Int!
  username: Int!
  _all: Int!
}

type UserAccountMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  password: String
  userId: String
  username: String
}

type UserAccountMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  password: String
  userId: String
  username: String
}

type UserAccount {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  password: String!
  userId: String
  username: String!
  user: User
}

type UserChatCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  chatId: Int!
  hidden: Int!
  pinned: Int!
  read: Int!
  userId: Int!
  _all: Int!
}

type UserChatMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  chatId: String
  hidden: Boolean
  pinned: Boolean
  read: Boolean
  userId: String
}

type UserChatMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  chatId: String
  hidden: Boolean
  pinned: Boolean
  read: Boolean
  userId: String
}

type UserChat {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  chatId: String!
  hidden: Boolean!
  pinned: Boolean!
  read: Boolean!
  userId: String!
  chat: Chat!
  user: User!
}

type Query {
  getAllBlackboards: [Blackboard!]!
  getLastBlackboards(sort: SortOrder!, limit: Float!, lastId: String): [Blackboard!]!
  getBlackboard(id: String!): Blackboard!
  getAllBlackboardTags: [BlackboardTag!]!
  getBlackboardTag(
    """OPTIONAL"""
    id: String

    """OPTIONAL"""
    tagName: String
  ): BlackboardTag!
  getAllChats: [Chat!]!
  getChat(id: String!): Chat!
  getAllChatActivities: [ChatActivity!]!
  getChatActivity(id: String!): ChatActivity!
  getAllClasses: [Class!]!
  getClass(id: String!): Class!
  getAllClubs: [Club!]!
  getClub(id: String!): Club!
  getAllClubTags: [ClubTag!]!
  getClubTag(id: String!): ClubTag!
  getAllCourses: [Course!]!
  getCourse(id: String!): Course!
  getAllEvents: [Event!]!
  getEvent(id: String!): Event!
  getAllEventTickets(
    """Get all event tickets matching the eventId. OPTIONAL"""
    eventId: String
  ): [EventTicket!]!
  getEventTicket(id: String!): EventTicket!
  getAllGrades: [Grade!]!
  getGrade(id: String!): Grade!
  getAllSchools: [School!]!
  getSchool(id: String, name: String): School!
  getAllSetupAccounts: [SetupAccount!]!
  getSetupAccount(id: String!, schoolName: String!): SetupAccount!
  getAllSubjects: [Subject!]!
  getSubject(id: String, type: SubjectType): Subject!
  getAllUsers: [User!]!
  getUserById(id: String!): User!
  getAllUserAccounts: [UserAccount!]!
  getUserAccount(id: String, username: String): UserAccount!
  getAllUserChats: [UserChat!]!
  getUserChat(id: String!): UserChat!
}

enum SortOrder {
  asc
  desc
}

type Mutation {
  createBlackboard(blackboard: CreateBlackboardDto!): Blackboard!
  editBlackboard(id: String!, blackboard: EditBlackboardDto!): Blackboard!
  deleteBlackboard(id: String!): Blackboard!
  createBlackboardTag(blackboardTag: CreateBlackboardTagDto!): BlackboardTag!
  editBlackboardTagById(blackboardTag: CreateBlackboardTagDto!, id: String, tag: String): BlackboardTag!
  deleteBlackboardTagById(id: String, tag: String): BlackboardTag!
  createChat(chat: CreateChatDto!): Chat!
  editChat(id: String!, chat: EditChatDto!): Chat!
  deleteChat(id: String!): Chat!
  createChatActivity(chatActivity: CreateChatActivityDto!): ChatActivity!
  editChatActivity(id: String!, chatActivity: EditChatActivityDto!): ChatActivity!
  deleteChatActivity(id: String!): ChatActivity!
  createClass(class: CreateClassDto!): Class!
  editClass(id: String!, class: EditClassDto!): Class!
  deleteClass(id: String!): Class!
  createClub(club: CreateClubDto!): Club!
  editClub(id: String!, club: EditClubDto!): Club!
  deleteClub(id: String!): Club!
  createClubTag(clubTag: CreateClubTagDto!): ClubTag!
  editClubTag(id: String!, clubTag: EditClubTagDto!): ClubTag!
  deleteClubTag(id: String!): ClubTag!
  createCourse(course: CreateCourseDto!): Course!
  editCourse(id: String!, course: EditCourseDto!): Course!
  deleteCourse(id: String!): Course!
  createEvent(event: CreateEventDto!): Event!
  editEvent(id: String!, event: EditEventDto!): Event!
  deleteEvent(id: String!): Event!
  createEventTicket(eventTicket: CreateEventTicketDto!): EventTicket!
  editEventTicket(id: String!, eventTicket: CreateEventTicketDto!): EventTicket!
  deleteEventTicket(id: String!): EventTicket!
  createGrade(grade: CreateGradeDto!): Grade!
  editGrade(id: String!, grade: EditGradeDto!): Grade!
  deleteGrade(id: String!): Grade!
  createSchool(school: CreateSchoolDto!): School!
  editSchool(id: String!, school: EditSchoolDto!): School!
  deleteSchool(id: String!): School!
  createSetupAccount(setupAccount: CreateSetupAccountDto!): SetupAccount!
  editSetupAccount(id: String!, setupAccount: EditSetupAccountDto!): SetupAccount!
  deleteSetupAccount(id: String!): SetupAccount!
  createSubject(subject: CreateSubjectDto!): Subject!
  editSubject(id: String!, subject: EditSubjectDto!): Subject!
  deleteSubject(id: String!): Subject!
  createUser(user: CreateUserDto!): User!
  editUser(id: String!, user: EditUserDto!): User!
  deleteUser(id: String!): User!
  createUserAccount(userAccount: CreateUserAccountDto!): UserAccount!
  editUseraccount(id: String!, userAccount: CreateUserAccountDto!): UserAccount!
  deleteUserAccount(id: String!): UserAccount!
  createUserChat(userChat: CreateUserChatDto!): UserChat!
  editUserChat(id: String!, userChat: EditUserChatDto!): UserChat!
  hideUserChat(id: String!, hide: Boolean!): UserChat!
  pinUserChat(id: String!, pin: Boolean!): UserChat!
  readUserChat(id: String!, read: Boolean!): UserChat!
  deleteUserChat(id: String!): UserChat!
}

input CreateBlackboardDto {
  authors: [String!]!
  coverImage: String
  school: String!
  tags: [String!]
  targets: [String!]
  title: String!
  text: String!
}

input EditBlackboardDto {
  authors: [String!]
  coverImage: String
  school: String
  tags: [String!]
  targets: [String!]
  title: String
  text: String
}

input CreateBlackboardTagDto {
  blackboards: [String!]
  name: String!
}

input CreateChatDto {
  activities: [String!]
  avatar: String
  clubs: [String!]
  courses: [String!]
  name: String!
  targets: [String!]
  type: ChatType!
}

input EditChatDto {
  activities: [String!]
  avatar: String
  clubs: [String!]
  courses: [String!]
  name: String
  targets: [String!]
  type: ChatType
}

input CreateChatActivityDto {
  activityContent: JSON!
  answeredBy: String
  answerTo: String
  chat: String!
  executor: String!
  readBy: [String!]
  type: ChatActivityType!
  starred: Boolean
}

input EditChatActivityDto {
  activityContent: JSON
  answeredBy: String
  answerTo: String
  chat: String
  executor: String
  readBy: [String!]
  type: ChatActivityType
  starred: Boolean
}

input CreateClassDto {
  courses: [String!]
  grade: String!
  members: [String!]
  school: String!
  specifiedGrade: String!
}

input EditClassDto {
  courses: [String!]
  grade: String
  members: [String!]
  specifiedGrade: String
  school: String
}

input CreateClubDto {
  chat: String
  coverImage: String!
  description: String!
  events: [String!]
  leaders: [String!]!
  location: String!
  meetingDay: Day!
  meetingTime: String!
  members: [String!]!
  name: String!
  requirements: [ClubRequirement!]!
  school: String!
  tags: [String!]!
}

input ClubRequirement {
  emoji: String!
  description: String!
}

input EditClubDto {
  chat: String
  coverImage: String
  description: String
  events: [String!]
  leaders: [String!]
  location: String
  meetingDay: Day
  meetingTime: String
  members: [String!]
  name: String
  requirements: [ClubRequirement!]
  school: String
  tags: [String!]
}

input CreateClubTagDto {
  clubs: [String!]
  name: String!
}

input EditClubTagDto {
  clubs: [String!]
  name: String
}

input CreateCourseDto {
  chat: String
  classes: [String!]!
  members: [String!]!
  name: String!
  subject: String!
  teacher: String!
}

input EditCourseDto {
  chat: String
  classes: [String!]
  members: [String!]
  name: String
  subject: String
  teacher: String
}

input CreateEventDto {
  clubs: [String!]!
  description: String!
  endDate: DateTime!
  host: String!
  information: [EventInformation!]!
  location: String!
  school: String!
  startDate: DateTime!
  subscribers: [String!]!
  tickets: [String!]!
  title: String!
}

input EventInformation {
  title: String!
  items: [EventInformationItem!]!
}

input EventInformationItem {
  emoji: String!
  description: String!
}

input EditEventDto {
  clubs: [String!]
  description: String
  endDate: DateTime
  host: String
  information: [EventInformation!]
  location: String
  school: String
  startDate: DateTime
  subscribers: [String!]
  tickets: [String!]
  title: String
}

input CreateEventTicketDto {
  buyer: String!
  event: String!
  price: Float!
  saleDate: DateTime!
}

input CreateGradeDto {
  classes: [String!]
  level: GradeLevel!
  school: String!
}

input EditGradeDto {
  classes: [String!]
  level: GradeLevel
  school: String
}

input CreateSchoolDto {
  blackboards: [String!]
  classes: [String!]
  clubs: [String!]
  events: [String!]
  grades: [String!]
  members: [String!]
  name: String!
  setupAccount: String!
  subjects: [String!]
}

input EditSchoolDto {
  blackboards: [String!]
  classes: [String!]
  clubs: [String!]
  events: [String!]
  grades: [String!]
  members: [String!]
  name: String
  setupAccount: String
  subjects: [String!]
}

input CreateSetupAccountDto {
  school: String
  schoolName: String!
}

input EditSetupAccountDto {
  school: String
  schoolName: String
}

input CreateSubjectDto {
  courses: [String!]
  school: String!
  shortName: String!
  type: SubjectType!
}

input EditSubjectDto {
  courses: [String!]
  school: String
  shortName: String
  type: SubjectType
}

input CreateUserDto {
  avatar: String
  blackboards: [String!]
  blackboardsReceived: [String!]
  chatActivitiesCreated: [String!]!
  classes: [String!]
  clubs: [String!]
  clubsAsLeader: [String!]
  courses: [String!]
  coursesAsTeacher: [String!]
  events: [String!]
  eventTickets: [String!]
  firstName: String
  lastName: String!
  readActivities: [String!]
  schools: [String!]!
  targetActivities: [String!]
  type: String!
  userAccount: String!
  userChats: [String!]
}

input EditUserDto {
  activities: [String!]
  avatar: String
  blackboards: [String!]
  blackboardsReceived: [String!]
  chatActivitiesCreated: [String!]
  classes: [String!]
  clubs: [String!]
  clubsAsLeader: [String!]
  courses: [String!]
  coursesAsTeacher: [String!]
  events: [String!]
  eventTickets: [String!]
  firstName: String
  lastName: String!
  readActivities: [String!]
  schools: [String!]!
  targetActivities: [String!]
  type: String!
  userAccount: String!
  userChats: [String!]
}

input CreateUserAccountDto {
  password: String!
  user: String
  username: String!
}

input CreateUserChatDto {
  chat: String!
  hidden: Boolean
  pinned: Boolean
  read: Boolean
  user: String!
}

input EditUserChatDto {
  chat: String
  hidden: Boolean
  pinned: Boolean
  read: Boolean
  user: String
}