model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar        String?
  blackboards   Blackboard[] @relation("BlackboardAuthor")
  blackboardsReceived Blackboard[]
  classes       Class[] @relation("ClassMember")
  clubs         Club[] @relation("ClubMember")
  clubsAsLeader Club[] @relation("ClubLeader")
  courses       Course[] @relation("CourseMember")
  coursesAsTeacher Course[]
  events        Event[]
  eventTickets  EventTicket[]
  firstName     String
  lastName      String
  messages      Message[]
  schools       School[]
  type          UserType
  userAccount   UserAccount @relation(fields: [userAccountId], references: [id])
  userAccountId String @unique @db.Uuid
  userChats     UserChat[]

  @@map("users")
}

model UserAccount {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password String
  user     User?
  userId   String? @db.Uuid
  username String @unique

  @@map("user_accounts")
}

model UserChat {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat   Chat    @relation(fields: [chatId], references: [id])
  chatId String @db.Uuid
  hidden Boolean @default(false)
  pinned Boolean @default(false)
  read   Boolean @default(true)
  user   User    @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@map("user_chats")
}