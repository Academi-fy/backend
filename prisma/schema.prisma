// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blackboard {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authors    User[]         @relation("BlackboardAuthor")
  coverImage String?
  school     School          @relation(fields: [schoolId], references: [id])
  schoolId   String @db.Uuid
  tags       BlackboardTag[]
  targets    User[]
  text       String?
  title      String

  @@map("blackboards")
}

model BlackboardTag {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blackboards Blackboard[]
  name        String

  @@map("blackboard_tags")
}

model Chat {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar    String?
  clubs     Club[]
  courses   Course[]
  messages  Message[]
  name      String
  targets   UserChat[]
  type      String

  @@map("chats")
}

model Class {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses        Course[]
  grade          Grade    @relation(fields: [gradeId], references: [id])
  gradeId        String @db.Uuid
  members        User[]  @relation("ClassMember")
  school         School   @relation(fields: [schoolId], references: [id])
  schoolId       String @db.Uuid
  specifiedGrade String?

  @@map("classes")
}

model Club {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat         Chat?      @relation(fields: [chatId], references: [id])
  chatId       String? @db.Uuid
  coverImage   String?
  description  String?
  events       Event[]
  leaders      User[]    @relation("ClubLeader")
  location     String?
  meetingDay   String?
  meetingTime  String?
  members      User[]   @relation("ClubMember")
  name         String
  requirements Json[]
  school       School    @relation(fields: [schoolId], references: [id])
  schoolId     String @db.Uuid
  state        String
  tags         ClubTag[]

  @@map("clubs")
}

model ClubTag {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubs Club[]
  name  String

  @@map("club_tags")
}

model Course {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    String? @db.Uuid
  classes   Class[]
  members   User[] @relation("CourseMember")
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String @db.Uuid
  teacher   User     @relation(fields: [teacherId], references: [id])
  teacherId String @db.Uuid

  @@map("courses")
}

model Event {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubs       Club[]
  description String?
  endDate     DateTime
  host        String
  information Json[]
  location    String?
  school      School        @relation(fields: [schoolId], references: [id])
  schoolId    String @db.Uuid
  startDate   DateTime
  state       String
  subscribers User[]
  tickets     EventTicket[]
  title       String

  @@map("events")
}

model EventTicket {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer    User     @relation(fields: [buyerId], references: [id])
  buyerId  String @db.Uuid
  event    Event    @relation(fields: [eventId], references: [id])
  eventId  String @db.Uuid
  price    Int
  saleDate DateTime

  @@map("event_tickets")
}

model Grade {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes  Class[]
  level    Int
  school   School  @relation(fields: [schoolId], references: [id])
  schoolId String @db.Uuid

  @@map("grades")
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author      User      @relation(fields: [authorId], references: [id])
  authorId    String @db.Uuid
  chat        Chat      @relation(fields: [chatId], references: [id])
  chatId      String @db.Uuid
  content     Json[]
  editHistory Json[]
  reactions   Json[]
  replies     Message[] @relation("ReplyTo")
  replyTo     Message?  @relation("ReplyTo", fields: [replyToId], references: [id])
  replyToId   String? @db.Uuid

  @@map("messages")
}

model School {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blackboards    Blackboard[]
  classes        Class[]
  clubs          Club[]
  events         Event[]
  grades         Grade[]
  members        User[]
  name           String
  setupAccount   SetupAccount @relation(fields: [setupAccountId], references: [id])
  setupAccountId String @db.Uuid @unique
  subjects       Subject[]

  @@map("schools")
}

model SetupAccount {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school     School?
  schoolId   String? @db.Uuid
  schoolName String

  @@map("setup_accounts")
}

model Subject {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses   Course[]
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String @db.Uuid
  shortName String
  type      String

  @@map("subjects")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar        String?
  blackboards   Blackboard[] @relation("BlackboardAuthor")
  blackboardsReceived Blackboard[]
  classes       Class[] @relation("ClassMember")
  clubs         Club[] @relation("ClubMember")
  clubsAsLeader Club[] @relation("ClubLeader")
  courses       Course[] @relation("CourseMember")
  coursesAsTeacher Course[]
  events        Event[]
  eventTickets  EventTicket[]
  firstName     String
  lastName      String
  messages      Message[]
  schools       School[]
  type          String
  userAccount   UserAccount   @relation(fields: [userAccountId], references: [id])
  userAccountId String @unique @db.Uuid
  userChats     UserChat[]

  @@map("users")
}

model UserAccount {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password String
  user     User?
  userId   String? @db.Uuid
  username String @unique

  @@map("user_accounts")
}

model UserChat {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat   Chat    @relation(fields: [chatId], references: [id])
  chatId String @db.Uuid
  hidden Boolean @default(false)
  pinned Boolean @default(false)
  read   Boolean @default(false)
  user   User    @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@map("user_chats")
}

