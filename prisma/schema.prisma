// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider                              = "node node_modules/prisma-nestjs-graphql"
  output                                = "../src/@generated-types"
  fields_Validator_from                 = "class-validator"
  fields_Validator_input                = true
  requireSingleFieldsInWhereUniqueInput = true
  emitSingle                            = true
  emitCompiled                          = true
  purgeOutput                           = true
  noTypeId                              = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blackboard {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authors    User[]          @relation("BlackboardAuthor")
  coverImage String?
  school     School          @relation("SchoolBlackboard", fields: [schoolId], references: [id])
  schoolId   String          @db.Uuid
  tags       BlackboardTag[] @relation("BlackboardBlackboardTag")
  targets    User[]          @relation("BlackboardTarget")
  text       String?
  title      String

  @@map("blackboards")
}

model BlackboardTag {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blackboards Blackboard[] @relation("BlackboardBlackboardTag")
  name        String      @unique

  @@map("blackboard_tags")
}

model Chat {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activities   Json[]
  avatar       String?
  chatHistory  Json[]
  clubs        Club[]     @relation("ClubChat")
  courses      Course[]   @relation("CourseChat")
  lastActivity Json
  messages     Message[]  @relation("ChatMessage")
  name         String
  targets      UserChat[] @relation("ChatTarget")
  type         String

  @@map("chats")
}

model Class {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses        Course[] @relation("ClassCourse")
  grade          Grade    @relation("ClassGrade", fields: [gradeId], references: [id])
  gradeId        String   @db.Uuid
  members        User[]   @relation("ClassMember")
  school         School   @relation("ClassSchool", fields: [schoolId], references: [id])
  schoolId       String   @db.Uuid
  specifiedGrade String?

  @@map("classes")
}

model Club {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat         Chat?     @relation("ClubChat", fields: [chatId], references: [id])
  chatId       String?   @db.Uuid
  coverImage   String?
  description  String?
  events       Event[]   @relation("ClubEvent")
  leaders      User[]    @relation("ClubLeader")
  location     String?
  meetingDay   Day?
  meetingTime  String?
  members      User[]    @relation("ClubMember")
  name         String
  requirements Json[]
  school       School    @relation("ClubSchool", fields: [schoolId], references: [id])
  schoolId     String    @db.Uuid
  tags         ClubTag[] @relation("ClubClubTag")

  @@map("clubs")
}

model ClubTag {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubs Club[] @relation("ClubClubTag")
  name  String

  @@map("club_tags")
}

model Course {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat      Chat?   @relation("CourseChat", fields: [chatId], references: [id])
  chatId    String? @db.Uuid
  classes   Class[] @relation("ClassCourse")
  members   User[]  @relation("CourseMember")
  subject   Subject @relation("CourseSubject", fields: [subjectId], references: [id])
  subjectId String  @db.Uuid
  teacher   User    @relation("CourseTeacher", fields: [teacherId], references: [id])
  teacherId String  @db.Uuid

  @@map("courses")
}

model Event {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubs       Club[]        @relation("ClubEvent")
  description String?
  endDate     DateTime
  host        String
  information Json[]
  location    String?
  school      School        @relation("EventSchool", fields: [schoolId], references: [id])
  schoolId    String        @db.Uuid
  startDate   DateTime
  subscribers User[]        @relation("EventSubscriber")
  tickets     EventTicket[] @relation("EventEventTicket")
  title       String

  @@map("events")
}

model EventTicket {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer    User     @relation("EventTicketBuyer", fields: [buyerId], references: [id])
  buyerId  String   @db.Uuid
  event    Event    @relation("EventEventTicket", fields: [eventId], references: [id])
  eventId  String   @db.Uuid
  price    Int
  saleDate DateTime

  @@map("event_tickets")
}

model Grade {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classes  Class[]    @relation("ClassGrade")
  level    GradeLevel
  school   School     @relation("SchoolGrade", fields: [schoolId], references: [id])
  schoolId String     @db.Uuid

  @@map("grades")
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author      User      @relation("MessageAuthor", fields: [authorId], references: [id])
  authorId    String    @db.Uuid
  chat        Chat      @relation("ChatMessage", fields: [chatId], references: [id])
  chatId      String    @db.Uuid
  content     Json[]
  editHistory Json[]
  reactions   Json[]
  replies     Message[] @relation("ReplyTo")
  replyTo     Message?  @relation("ReplyTo", fields: [replyToId], references: [id])
  replyToId   String?   @db.Uuid
  userMessages UserMessage[] @relation("UserMessage")

  @@map("messages")
}

model School {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blackboards    Blackboard[] @relation("SchoolBlackboard")
  classes        Class[]      @relation("ClassSchool")
  clubs          Club[]       @relation("ClubSchool")
  events         Event[]      @relation("EventSchool")
  grades         Grade[]      @relation("SchoolGrade")
  members        User[]       @relation("SchoolMember")
  name           String      @unique
  setupAccount   SetupAccount @relation("SchoolSetupAccount", fields: [setupAccountId], references: [id])
  setupAccountId String       @unique @db.Uuid
  subjects       Subject[]    @relation("SubjectSchool")

  @@map("schools")
}

model SetupAccount {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school     School? @relation("SchoolSetupAccount")
  schoolId   String? @db.Uuid
  schoolName String @unique

  @@map("setup_accounts")
}

model Subject {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses   Course[]    @relation("CourseSubject")
  school    School      @relation("SubjectSchool", fields: [schoolId], references: [id])
  schoolId  String      @db.Uuid
  shortName String
  type      SubjectType @unique

  @@map("subjects")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar              String?
  blackboards         Blackboard[]  @relation("BlackboardAuthor")
  blackboardsReceived Blackboard[]  @relation("BlackboardTarget")
  classes             Class[]       @relation("ClassMember")
  clubs               Club[]        @relation("ClubMember")
  clubsAsLeader       Club[]        @relation("ClubLeader")
  courses             Course[]      @relation("CourseMember")
  coursesAsTeacher    Course[]      @relation("CourseTeacher")
  events              Event[]       @relation("EventSubscriber")
  eventTickets        EventTicket[] @relation("EventTicketBuyer")
  firstName           String
  lastName            String
  messages            Message[]     @relation("MessageAuthor")
  schools             School[]      @relation("SchoolMember")
  type                UserType
  userAccount         UserAccount   @relation("UserUserAccount", fields: [userAccountId], references: [id])
  userAccountId       String        @unique @db.Uuid
  userChats           UserChat[]   @relation("UserUserChat")
  userMessages        UserMessage[] @relation("UserUserMessage")

  @@map("users")
}

model UserAccount {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password String
  user     User?   @relation("UserUserAccount")
  userId   String? @db.Uuid
  username String  @unique

  @@map("user_accounts")
}

model UserChat {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat   Chat    @relation("ChatTarget", fields: [chatId], references: [id])
  chatId String  @db.Uuid
  hidden Boolean @default(false)
  pinned Boolean @default(false)
  read   Boolean @default(true)
  user   User    @relation("UserUserChat", fields: [userId], references: [id])
  userId String  @db.Uuid

  @@map("user_chats")
}

model UserMessage {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message   Message @relation("UserMessage", fields: [messageId], references: [id])
  messageId String  @db.Uuid
  read      Boolean @default(true)
  user      User    @relation("UserUserMessage", fields: [userId], references: [id])
  userId    String  @db.Uuid

  @@map("user_messages")
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum GradeLevel {
  G5
  G6
  G7
  G8
  G9
  G10
}

enum SubjectType {
  ART
  BIOLOGY
  CHEMISTRY
  COMPUTER_SCIENCE
  ECONOMICS
  ENGLISH
  ETHICS
  FRENCH
  GEOGRAPHY
  GERMAN
  HISTORY
  IMP
  ITALIAN
  MATHS
  MUSIC
  NWT
  PHYSICS
  POLITICS
  RELIGION
  SPANISH
  SPORT
}

enum UserType {
  ADMIN
  TEACHER
  STUDENT
}
